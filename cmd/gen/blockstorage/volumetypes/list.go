/*
*	DO NOT EDIT THIS FILE
*	IT IS AUTO GENERATED BY MGC
*	TEMPLATE: product.template
 */

package volumetypes

import (
	"context"

	
	"github.com/spf13/cobra"
	
	blockstorageSdk "github.com/MagaluCloud/mgc-sdk-go/blockstorage"
	
	flags "gfcli/cobra_utils/flags"
	
	"gfcli/beautiful"
	
)

func List(ctx context.Context, parent *cobra.Command, volumeTypeService blockstorageSdk.VolumeTypeService) {
	
	var opts_AvailabilityZoneFlag *flags.StrFlag //CobraFlagsDefinition
	
	var opts_NameFlag *flags.StrFlag //CobraFlagsDefinition
	
	var opts_AllowsEncryptionFlag *flags.BoolFlag //CobraFlagsDefinition
	
	

	cmd := &cobra.Command{
		Use:     "list",
		Short:   "Blockstorage provides functionality to interact with the MagaluCloud block storage service.",
		Long:    `doto3`,
		RunE: func(cmd *cobra.Command, args []string) error{
			
			
			var opts blockstorageSdk.ListVolumeTypesOptions// ServiceSDKParamCreate
			
			
			

			
			
			if opts_AvailabilityZoneFlag.IsChanged() {
				opts.AvailabilityZone = *opts_AvailabilityZoneFlag.Value
			}// CobraFlagsAssign
			
			if opts_NameFlag.IsChanged() {
				opts.Name = *opts_NameFlag.Value
			}// CobraFlagsAssign
			
			if opts_AllowsEncryptionFlag.IsChanged() {
				opts.AllowsEncryption = opts_AllowsEncryptionFlag.Value
			}// CobraFlagsAssign
			

			volumetype, err := volumeTypeService.List(ctx, opts)
			
			if err != nil {
				return err
			}
			
			raw, _ := cmd.Root().PersistentFlags().GetBool("raw")
			beautiful.NewOutput(raw).PrintData(volumetype)
			return nil
		},
	}
	
	
	opts_AvailabilityZoneFlag = flags.NewStrP(cmd, "availability-zone", "a", "", "")//CobraFlagsCreation
	
	opts_NameFlag = flags.NewStrP(cmd, "name", "m", "", "")//CobraFlagsCreation
	
	opts_AllowsEncryptionFlag = flags.NewBoolP(cmd, "allows-encryption", "l", false, "")//CobraFlagsCreation
	


	
	cmd.MarkFlagRequired("availability-zone")//CobraFlagsRequired
	
	cmd.MarkFlagRequired("name")//CobraFlagsRequired
	
	parent.AddCommand(cmd)

}

