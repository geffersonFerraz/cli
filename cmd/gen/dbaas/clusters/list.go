/*
*	DO NOT EDIT THIS FILE
*	IT IS AUTO GENERATED BY MGC
*	TEMPLATE: product.template
 */

package clusters

import (
	"context"

	
	"github.com/spf13/cobra"
	
	dbaasSdk "github.com/MagaluCloud/mgc-sdk-go/dbaas"
	
	flags "mgccli/cobra_utils/flags"
	
	"encoding/json"
	
	"fmt"
)

func List(ctx context.Context, parent *cobra.Command, clusterService dbaasSdk.ClusterService) {
	
	var opts_VolumeSizeFlag *flags.IntFlag //CobraFlagsDefinition
	
	var opts_VolumeSizeGteFlag *flags.IntFlag //CobraFlagsDefinition
	
	var opts_VolumeSizeLteFlag *flags.IntFlag //CobraFlagsDefinition
	
	var opts_OffsetFlag *flags.IntFlag //CobraFlagsDefinition
	
	var opts_VolumeSizeGtFlag *flags.IntFlag //CobraFlagsDefinition
	
	var opts_VolumeSizeLtFlag *flags.IntFlag //CobraFlagsDefinition
	
	var opts_ParameterGroupIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var opts_LimitFlag *flags.IntFlag //CobraFlagsDefinition
	
	var opts_EngineIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	

	cmd := &cobra.Command{
		Use:     "list",
		Short:   "todo",
		Long:    `todo2`,
		Run: func(cmd *cobra.Command, args []string) {
			
			
			var opts dbaasSdk.ListClustersOptions// ServiceSDKParamCreate
			
			
			

			
			
			if opts_VolumeSizeFlag.IsChanged() {
				opts.VolumeSize = opts_VolumeSizeFlag.Value
			}// CobraFlagsAssign
			
			if opts_VolumeSizeGteFlag.IsChanged() {
				opts.VolumeSizeGte = opts_VolumeSizeGteFlag.Value
			}// CobraFlagsAssign
			
			if opts_VolumeSizeLteFlag.IsChanged() {
				opts.VolumeSizeLte = opts_VolumeSizeLteFlag.Value
			}// CobraFlagsAssign
			
			if opts_OffsetFlag.IsChanged() {
				opts.Offset = opts_OffsetFlag.Value
			}// CobraFlagsAssign
			
			if opts_VolumeSizeGtFlag.IsChanged() {
				opts.VolumeSizeGt = opts_VolumeSizeGtFlag.Value
			}// CobraFlagsAssign
			
			if opts_VolumeSizeLtFlag.IsChanged() {
				opts.VolumeSizeLt = opts_VolumeSizeLtFlag.Value
			}// CobraFlagsAssign
			
			if opts_ParameterGroupIDFlag.IsChanged() {
				opts.ParameterGroupID = opts_ParameterGroupIDFlag.Value
			}// CobraFlagsAssign
			
			if opts_LimitFlag.IsChanged() {
				opts.Limit = opts_LimitFlag.Value
			}// CobraFlagsAssign
			
			if opts_EngineIDFlag.IsChanged() {
				opts.EngineID = opts_EngineIDFlag.Value
			}// CobraFlagsAssign
			

			clusterdetailresponse, err := clusterService.List(ctx, opts)
			sdkResult, err := json.MarshalIndent(clusterdetailresponse, "", "  ")
			if err != nil {
				fmt.Println(err.Error())
			}
			fmt.Println(string(sdkResult))
			if err != nil {
				fmt.Println(err.Error())
			}
		},
	}
	
	
	opts_VolumeSizeFlag = flags.NewIntP(cmd, "volume-size", "v", 0, "")//CobraFlagsCreation
	
	opts_VolumeSizeGteFlag = flags.NewIntP(cmd, "volume-size-gte", "l", 0, "")//CobraFlagsCreation
	
	opts_VolumeSizeLteFlag = flags.NewIntP(cmd, "volume-size-lte", "u", 0, "")//CobraFlagsCreation
	
	opts_OffsetFlag = flags.NewIntP(cmd, "offset", "f", 0, "")//CobraFlagsCreation
	
	opts_VolumeSizeGtFlag = flags.NewIntP(cmd, "volume-size-gt", "m", 0, "")//CobraFlagsCreation
	
	opts_VolumeSizeLtFlag = flags.NewIntP(cmd, "volume-size-lt", "e", 0, "")//CobraFlagsCreation
	
	opts_ParameterGroupIDFlag = flags.NewStrP(cmd, "parameter-group-i-d", "p", "", "")//CobraFlagsCreation
	
	opts_LimitFlag = flags.NewIntP(cmd, "limit", "i", 0, "")//CobraFlagsCreation
	
	opts_EngineIDFlag = flags.NewStrP(cmd, "engine-i-d", "g", "", "")//CobraFlagsCreation
	


	
	parent.AddCommand(cmd)

}

