/*
*	DO NOT EDIT THIS FILE
*	IT IS AUTO GENERATED BY MGC
*	TEMPLATE: product.template
 */

package rules

import (
	"context"

	
	"github.com/spf13/cobra"
	
	networkSdk "github.com/MagaluCloud/mgc-sdk-go/network"
	
	flags "gfcli/cobra_utils/flags"
	
	"gfcli/beautiful"
	
)

func Create(ctx context.Context, parent *cobra.Command, ruleService networkSdk.RuleService) {
	
	var securityGroupIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_ProtocolFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_RemoteIPPrefixFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_EtherTypeFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_DescriptionFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_DirectionFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_PortRangeMinFlag *flags.IntFlag //CobraFlagsDefinition
	
	var req_PortRangeMaxFlag *flags.IntFlag //CobraFlagsDefinition
	
	

	cmd := &cobra.Command{
		Use:     "create",
		Short:   "Network provides a client for interacting with the Magalu Cloud Network API.",
		Long:    `doto3`,
		RunE: func(cmd *cobra.Command, args []string) error{
			
			
			var securityGroupID string// ServiceSDKParamCreate
			
			var req networkSdk.RuleCreateRequest// ServiceSDKParamCreate
			
			
			

			
			
			if securityGroupIDFlag.IsChanged() {
				securityGroupID = *securityGroupIDFlag.Value
			}// CobraFlagsAssign
			
			if req_ProtocolFlag.IsChanged() {
				req.Protocol = req_ProtocolFlag.Value
			}// CobraFlagsAssign
			
			if req_RemoteIPPrefixFlag.IsChanged() {
				req.RemoteIPPrefix = req_RemoteIPPrefixFlag.Value
			}// CobraFlagsAssign
			
			if req_EtherTypeFlag.IsChanged() {
				req.EtherType = *req_EtherTypeFlag.Value
			}// CobraFlagsAssign
			
			if req_DescriptionFlag.IsChanged() {
				req.Description = req_DescriptionFlag.Value
			}// CobraFlagsAssign
			
			if req_DirectionFlag.IsChanged() {
				req.Direction = req_DirectionFlag.Value
			}// CobraFlagsAssign
			
			if req_PortRangeMinFlag.IsChanged() {
				req.PortRangeMin = req_PortRangeMinFlag.Value
			}// CobraFlagsAssign
			
			if req_PortRangeMaxFlag.IsChanged() {
				req.PortRangeMax = req_PortRangeMaxFlag.Value
			}// CobraFlagsAssign
			

			result, err := ruleService.Create(ctx, securityGroupID, req)
			
			if err != nil {
				return err
			}
			
			raw, _ := cmd.Root().PersistentFlags().GetBool("raw")
			beautiful.NewOutput(raw).PrintData(result)
			return nil
		},
	}
	
	
	securityGroupIDFlag = flags.NewStrP(cmd, "security-group-id", "s", "", "")//CobraFlagsCreation
	
	req_ProtocolFlag = flags.NewStrP(cmd, "protocol", "p", "", "")//CobraFlagsCreation
	
	req_RemoteIPPrefixFlag = flags.NewStrP(cmd, "remote-i-p-prefix", "e", "", "")//CobraFlagsCreation
	
	req_EtherTypeFlag = flags.NewStrP(cmd, "ether-type", "t", "", "")//CobraFlagsCreation
	
	req_DescriptionFlag = flags.NewStrP(cmd, "description", "c", "", "")//CobraFlagsCreation
	
	req_DirectionFlag = flags.NewStrP(cmd, "direction", "i", "", "")//CobraFlagsCreation
	
	req_PortRangeMinFlag = flags.NewIntP(cmd, "port-range-min", "a", 0, "")//CobraFlagsCreation
	
	req_PortRangeMaxFlag = flags.NewIntP(cmd, "port-range-max", "g", 0, "")//CobraFlagsCreation
	


	
	cmd.MarkFlagRequired("securityGroupID")//CobraFlagsRequired
	
	cmd.MarkFlagRequired("ether-type")//CobraFlagsRequired
	
	parent.AddCommand(cmd)

}

