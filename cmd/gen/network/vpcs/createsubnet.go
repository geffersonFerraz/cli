/*
*	DO NOT EDIT THIS FILE
*	IT IS AUTO GENERATED BY MGC
*	TEMPLATE: product.template
 */

package vpcs

import (
	"context"

	
	"github.com/spf13/cobra"
	
	networkSdk "github.com/MagaluCloud/mgc-sdk-go/network"
	
	flags "gfcli/cobra_utils/flags"
	
	"encoding/json"
	
	"gfcli/cmd_utils"
	
	"fmt"
)

func CreateSubnet(ctx context.Context, parent *cobra.Command, vPCService networkSdk.VPCService) {
	
	var vpcIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_IPVersionFlag *flags.IntFlag //CobraFlagsDefinition
	
	var req_DNSNameserversFlag *flags.StrSliceFlag //CobraFlagsDefinition
	
	var req_SubnetPoolIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_NameFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_DescriptionFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_CIDRBlockFlag *flags.StrFlag //CobraFlagsDefinition
	
	var opts_ZoneFlag *flags.StrFlag //CobraFlagsDefinition
	
	

	cmd := &cobra.Command{
		Use:     "create-subnet",
		Short:   "VPCs, Subnets, Ports, SecurityGroups, Rules, PublicIPs...",
		Long:    `defaultLongDesc 3`,
		Run: func(cmd *cobra.Command, args []string) {
			
			
			var vpcID string// ServiceSDKParamCreate
			
			var req networkSdk.SubnetCreateRequest// ServiceSDKParamCreate
			
			var opts networkSdk.SubnetCreateOptions// ServiceSDKParamCreate
			
			
			

			
			
			if vpcIDFlag.IsChanged() {
				vpcID = *vpcIDFlag.Value
			}// CobraFlagsAssign
			
			if req_IPVersionFlag.IsChanged() {
				req.IPVersion = *req_IPVersionFlag.Value
			}// CobraFlagsAssign
			
			if req_DNSNameserversFlag.IsChanged() {
				req.DNSNameservers = req_DNSNameserversFlag.Value
			}// CobraFlagsAssign
			
			if req_SubnetPoolIDFlag.IsChanged() {
				req.SubnetPoolID = req_SubnetPoolIDFlag.Value
			}// CobraFlagsAssign
			
			if req_NameFlag.IsChanged() {
				req.Name = *req_NameFlag.Value
			}// CobraFlagsAssign
			
			if req_DescriptionFlag.IsChanged() {
				req.Description = req_DescriptionFlag.Value
			}// CobraFlagsAssign
			
			if req_CIDRBlockFlag.IsChanged() {
				req.CIDRBlock = *req_CIDRBlockFlag.Value
			}// CobraFlagsAssign
			
			if opts_ZoneFlag.IsChanged() {
				opts.Zone = opts_ZoneFlag.Value
			}// CobraFlagsAssign
			

			result, err := vPCService.CreateSubnet(ctx, vpcID, req, opts)
			
			if err != nil {
			msg, detail := cmdutils.ParseSDKError(err)
					fmt.Println(msg)
					fmt.Println(detail)
					return
				}
			
			sdkResult, err := json.MarshalIndent(result, "", "  ")

			if err != nil {
			msg, detail := cmdutils.ParseSDKError(err)
					fmt.Println(msg)
					fmt.Println(detail)
					return
				}
			
			fmt.Println(string(sdkResult))
		},
	}
	
	
	vpcIDFlag = flags.NewStrP(cmd, "vpc-i-d", "v", "", "")//CobraFlagsCreation
	
	req_IPVersionFlag = flags.NewIntP(cmd, "i-p-version", "i", 0, "")//CobraFlagsCreation
	
	req_DNSNameserversFlag = flags.NewStrSliceP(cmd, "d-n-s-nameservers", "s", []string{}, "")//CobraFlagsCreation
	
	req_SubnetPoolIDFlag = flags.NewStrP(cmd, "subnet-pool-i-d", "u", "", "")//CobraFlagsCreation
	
	req_NameFlag = flags.NewStrP(cmd, "name", "a", "", "")//CobraFlagsCreation
	
	req_DescriptionFlag = flags.NewStrP(cmd, "description", "e", "", "")//CobraFlagsCreation
	
	req_CIDRBlockFlag = flags.NewStrP(cmd, "c-i-d-r-block", "c", "", "")//CobraFlagsCreation
	
	opts_ZoneFlag = flags.NewStrP(cmd, "zone", "z", "", "")//CobraFlagsCreation
	


	
	cmd.MarkFlagRequired("vpcID")//CobraFlagsRequired
	
	cmd.MarkFlagRequired("i-p-version")//CobraFlagsRequired
	
	cmd.MarkFlagRequired("name")//CobraFlagsRequired
	
	cmd.MarkFlagRequired("c-i-d-r-block")//CobraFlagsRequired
	
	parent.AddCommand(cmd)

}

