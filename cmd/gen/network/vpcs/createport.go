/*
*	DO NOT EDIT THIS FILE
*	IT IS AUTO GENERATED BY MGC
*	TEMPLATE: product.template
 */

package vpcs

import (
	"context"

	
	"github.com/spf13/cobra"
	
	networkSdk "github.com/MagaluCloud/mgc-sdk-go/network"
	
	flags "gfcli/cobra_utils/flags"
	
	"encoding/json"
	
	"gfcli/cmd_utils"
	
	"fmt"
)

func CreatePort(ctx context.Context, parent *cobra.Command, vPCService networkSdk.VPCService) {
	
	var vpcIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_HasPIPFlag *flags.BoolFlag //CobraFlagsDefinition
	
	var req_HasSGFlag *flags.BoolFlag //CobraFlagsDefinition
	
	var req_SubnetsFlag *flags.StrSliceFlag //CobraFlagsDefinition
	
	var req_SecurityGroupsFlag *flags.StrSliceFlag //CobraFlagsDefinition
	
	var req_NameFlag *flags.StrFlag //CobraFlagsDefinition
	
	var opts_ZoneFlag *flags.StrFlag //CobraFlagsDefinition
	
	

	cmd := &cobra.Command{
		Use:     "create-port",
		Short:   "Network provides a client for interacting with the Magalu Cloud Network API.",
		Long:    `defaultLongDesc 3`,
		Run: func(cmd *cobra.Command, args []string) {
			
			
			var vpcID string// ServiceSDKParamCreate
			
			var req networkSdk.PortCreateRequest// ServiceSDKParamCreate
			
			var opts networkSdk.PortCreateOptions// ServiceSDKParamCreate
			
			
			

			
			
			if vpcIDFlag.IsChanged() {
				vpcID = *vpcIDFlag.Value
			}// CobraFlagsAssign
			
			if req_HasPIPFlag.IsChanged() {
				req.HasPIP = req_HasPIPFlag.Value
			}// CobraFlagsAssign
			
			if req_HasSGFlag.IsChanged() {
				req.HasSG = req_HasSGFlag.Value
			}// CobraFlagsAssign
			
			if req_SubnetsFlag.IsChanged() {
				req.Subnets = req_SubnetsFlag.Value
			}// CobraFlagsAssign
			
			if req_SecurityGroupsFlag.IsChanged() {
				req.SecurityGroups = req_SecurityGroupsFlag.Value
			}// CobraFlagsAssign
			
			if req_NameFlag.IsChanged() {
				req.Name = *req_NameFlag.Value
			}// CobraFlagsAssign
			
			if opts_ZoneFlag.IsChanged() {
				opts.Zone = opts_ZoneFlag.Value
			}// CobraFlagsAssign
			

			result, err := vPCService.CreatePort(ctx, vpcID, req, opts)
			
			if err != nil {
			msg, detail := cmdutils.ParseSDKError(err)
					fmt.Println(msg)
					fmt.Println(detail)
					return
				}
			
			sdkResult, err := json.MarshalIndent(result, "", "  ")

			if err != nil {
			msg, detail := cmdutils.ParseSDKError(err)
					fmt.Println(msg)
					fmt.Println(detail)
					return
				}
			
			fmt.Println(string(sdkResult))
		},
	}
	
	
	vpcIDFlag = flags.NewStrP(cmd, "vpc-i-d", "v", "", "")//CobraFlagsCreation
	
	req_HasPIPFlag = flags.NewBoolP(cmd, "has-p-i-p", "a", false, "")//CobraFlagsCreation
	
	req_HasSGFlag = flags.NewBoolP(cmd, "has-s-g", "s", false, "")//CobraFlagsCreation
	
	req_SubnetsFlag = flags.NewStrSliceP(cmd, "subnets", "u", []string{}, "")//CobraFlagsCreation
	
	req_SecurityGroupsFlag = flags.NewStrSliceP(cmd, "security-groups", "e", []string{}, "")//CobraFlagsCreation
	
	req_NameFlag = flags.NewStrP(cmd, "name", "m", "", "")//CobraFlagsCreation
	
	opts_ZoneFlag = flags.NewStrP(cmd, "zone", "z", "", "")//CobraFlagsCreation
	


	
	cmd.MarkFlagRequired("vpcID")//CobraFlagsRequired
	
	cmd.MarkFlagRequired("name")//CobraFlagsRequired
	
	parent.AddCommand(cmd)

}

