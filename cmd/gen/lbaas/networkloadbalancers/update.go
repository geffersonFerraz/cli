/*
*	DO NOT EDIT THIS FILE
*	IT IS AUTO GENERATED BY MGC
*	TEMPLATE: product.template
 */

package networkloadbalancers

import (
	"context"

	
	"github.com/spf13/cobra"
	
	lbaasSdk "github.com/MagaluCloud/mgc-sdk-go/lbaas"
	
	flags "gfcli/cobra_utils/flags"
	
	"gfcli/cmd_utils"
	
	"fmt"
)

func Update(ctx context.Context, parent *cobra.Command, networkLoadBalancerService lbaasSdk.NetworkLoadBalancerService) {
	
	var req_PanicThresholdFlag *flags.IntFlag //CobraFlagsDefinition
	
	var req_LoadBalancerIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_NameFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_DescriptionFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_BackendsFlag *flags.JSONArrayValue[lbaasSdk.NetworkBackendUpdateRequest] //CobraFlagsDefinition
	
	var req_HealthChecksFlag *flags.JSONArrayValue[lbaasSdk.NetworkHealthCheckUpdateRequest] //CobraFlagsDefinition
	
	var req_TLSCertificatesFlag *flags.JSONArrayValue[lbaasSdk.NetworkTLSCertificateUpdateRequest] //CobraFlagsDefinition
	
	

	cmd := &cobra.Command{
		Use:     "update",
		Short:   "Lbaas provides a client for interacting with the Magalu Cloud Load Balancer as a Service (LBaaS) API.",
		Long:    `defaultLongDesc 3`,
		Run: func(cmd *cobra.Command, args []string) {
			
			
			var req lbaasSdk.UpdateNetworkLoadBalancerRequest// ServiceSDKParamCreate
			
			
			

			
			
			if req_PanicThresholdFlag.IsChanged() {
				req.PanicThreshold = req_PanicThresholdFlag.Value
			}// CobraFlagsAssign
			
			if req_LoadBalancerIDFlag.IsChanged() {
				req.LoadBalancerID = *req_LoadBalancerIDFlag.Value
			}// CobraFlagsAssign
			
			if req_NameFlag.IsChanged() {
				req.Name = req_NameFlag.Value
			}// CobraFlagsAssign
			
			if req_DescriptionFlag.IsChanged() {
				req.Description = req_DescriptionFlag.Value
			}// CobraFlagsAssign
			
			if req_BackendsFlag.IsChanged() {
				req.Backends = *req_BackendsFlag.Value
			}// CobraFlagsAssign
			
			if req_HealthChecksFlag.IsChanged() {
				req.HealthChecks = *req_HealthChecksFlag.Value
			}// CobraFlagsAssign
			
			if req_TLSCertificatesFlag.IsChanged() {
				req.TLSCertificates = *req_TLSCertificatesFlag.Value
			}// CobraFlagsAssign
			

			err := networkLoadBalancerService.Update(ctx, req)
			
			if err != nil {
			msg, detail := cmdutils.ParseSDKError(err)
					fmt.Println(msg)
					fmt.Println(detail)
					return
				}
			
		},
	}
	
	
	req_PanicThresholdFlag = flags.NewIntP(cmd, "panic-threshold", "p", 0, "")//CobraFlagsCreation
	
	req_LoadBalancerIDFlag = flags.NewStrP(cmd, "load-balancer-i-d", "l", "", "")//CobraFlagsCreation
	
	req_NameFlag = flags.NewStrP(cmd, "name", "a", "", "")//CobraFlagsCreation
	
	req_DescriptionFlag = flags.NewStrP(cmd, "description", "e", "", "")//CobraFlagsCreation
	
	req_BackendsFlag = flags.NewJSONArrayValueP[lbaasSdk.NetworkBackendUpdateRequest](cmd, "backends", "b", "",)//CobraFlagsCreation
	
	req_HealthChecksFlag = flags.NewJSONArrayValueP[lbaasSdk.NetworkHealthCheckUpdateRequest](cmd, "health-checks", "t", "",)//CobraFlagsCreation
	
	req_TLSCertificatesFlag = flags.NewJSONArrayValueP[lbaasSdk.NetworkTLSCertificateUpdateRequest](cmd, "t-l-s-certificates", "s", "",)//CobraFlagsCreation
	


	
	cmd.MarkFlagRequired("load-balancer-i-d")//CobraFlagsRequired
	
	parent.AddCommand(cmd)

}

