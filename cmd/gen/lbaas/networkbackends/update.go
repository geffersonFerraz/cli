/*
*	DO NOT EDIT THIS FILE
*	IT IS AUTO GENERATED BY MGC
*	TEMPLATE: product.template
 */

package networkbackends

import (
	"context"

	
	"github.com/spf13/cobra"
	
	lbaasSdk "github.com/MagaluCloud/mgc-sdk-go/lbaas"
	
	flags "gfcli/cobra_utils/flags"
	
)

func Update(ctx context.Context, parent *cobra.Command, networkBackendService lbaasSdk.NetworkBackendService) {
	
	var req_NameFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_HealthCheckIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_LoadBalancerIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_BackendIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_DescriptionFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_TargetsInstancesFlag *flags.JSONArrayValue[lbaasSdk.NetworkBackendInstanceRequest] //CobraFlagsDefinition
	
	var req_TargetsRawFlag *flags.JSONArrayValue[lbaasSdk.NetworkBackendRawTargetRequest] //CobraFlagsDefinition
	
	

	cmd := &cobra.Command{
		Use:     "update",
		Short:   "Lbaas provides a client for interacting with the Magalu Cloud Load Balancer as a Service (LBaaS) API.",
		Long:    `doto3`,
		RunE: func(cmd *cobra.Command, args []string) error{
			
			
			var req lbaasSdk.UpdateNetworkBackendRequest// ServiceSDKParamCreate
			
			
			

			
			
			if req_NameFlag.IsChanged() {
				req.Name = req_NameFlag.Value
			}// CobraFlagsAssign
			
			if req_HealthCheckIDFlag.IsChanged() {
				req.HealthCheckID = req_HealthCheckIDFlag.Value
			}// CobraFlagsAssign
			
			if req_LoadBalancerIDFlag.IsChanged() {
				req.LoadBalancerID = *req_LoadBalancerIDFlag.Value
			}// CobraFlagsAssign
			
			if req_BackendIDFlag.IsChanged() {
				req.BackendID = *req_BackendIDFlag.Value
			}// CobraFlagsAssign
			
			if req_DescriptionFlag.IsChanged() {
				req.Description = req_DescriptionFlag.Value
			}// CobraFlagsAssign
			
			if req_TargetsInstancesFlag.IsChanged() {
				req.TargetsInstances = req_TargetsInstancesFlag.Value
			}// CobraFlagsAssign
			
			if req_TargetsRawFlag.IsChanged() {
				req.TargetsRaw = req_TargetsRawFlag.Value
			}// CobraFlagsAssign
			

			err := networkBackendService.Update(ctx, req)
			
			if err != nil {
				return err
			}
			
			return nil
		},
	}
	
	
	req_NameFlag = flags.NewStrP(cmd, "name", "n", "", "")//CobraFlagsCreation
	
	req_HealthCheckIDFlag = flags.NewStrP(cmd, "health-check-id", "e", "", "")//CobraFlagsCreation
	
	req_LoadBalancerIDFlag = flags.NewStrP(cmd, "load-balancer-id", "l", "", "")//CobraFlagsCreation
	
	req_BackendIDFlag = flags.NewStrP(cmd, "backend-id", "b", "", "")//CobraFlagsCreation
	
	req_DescriptionFlag = flags.NewStrP(cmd, "description", "s", "", "")//CobraFlagsCreation
	
	req_TargetsInstancesFlag = flags.NewJSONArrayValueP[lbaasSdk.NetworkBackendInstanceRequest](cmd, "targets-instances", "t", "",)//CobraFlagsCreation
	
	req_TargetsRawFlag = flags.NewJSONArrayValueP[lbaasSdk.NetworkBackendRawTargetRequest](cmd, "targets-raw", "a", "",)//CobraFlagsCreation
	


	
	cmd.MarkFlagRequired("load-balancer-id")//CobraFlagsRequired
	
	cmd.MarkFlagRequired("backend-id")//CobraFlagsRequired
	
	parent.AddCommand(cmd)

}

