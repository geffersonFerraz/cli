/*
*	DO NOT EDIT THIS FILE
*	IT IS AUTO GENERATED BY MGC
*	TEMPLATE: product.template
 */

package networkhealthchecks

import (
	"context"

	
	"github.com/spf13/cobra"
	
	lbaasSdk "github.com/MagaluCloud/mgc-sdk-go/lbaas"
	
	flags "gfcli/cobra_utils/flags"
	
)

func Update(ctx context.Context, parent *cobra.Command, networkHealthCheckService lbaasSdk.NetworkHealthCheckService) {
	
	var req_InitialDelaySecondsFlag *flags.IntFlag //CobraFlagsDefinition
	
	var req_UnhealthyThresholdCountFlag *flags.IntFlag //CobraFlagsDefinition
	
	var req_PortFlag *flags.IntFlag //CobraFlagsDefinition
	
	var req_HealthyStatusCodeFlag *flags.IntFlag //CobraFlagsDefinition
	
	var req_IntervalSecondsFlag *flags.IntFlag //CobraFlagsDefinition
	
	var req_HealthyThresholdCountFlag *flags.IntFlag //CobraFlagsDefinition
	
	var req_LoadBalancerIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_HealthCheckIDFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_PathFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_TimeoutSecondsFlag *flags.IntFlag //CobraFlagsDefinition
	
	

	cmd := &cobra.Command{
		Use:     "update",
		Short:   "Lbaas provides a client for interacting with the Magalu Cloud Load Balancer as a Service (LBaaS) API.",
		Long:    `doto3`,
		RunE: func(cmd *cobra.Command, args []string) error{
			
			
			var req lbaasSdk.UpdateNetworkHealthCheckRequest// ServiceSDKParamCreate
			
			
			

			
			
			if req_InitialDelaySecondsFlag.IsChanged() {
				req.InitialDelaySeconds = req_InitialDelaySecondsFlag.Value
			}// CobraFlagsAssign
			
			if req_UnhealthyThresholdCountFlag.IsChanged() {
				req.UnhealthyThresholdCount = req_UnhealthyThresholdCountFlag.Value
			}// CobraFlagsAssign
			
			if req_PortFlag.IsChanged() {
				req.Port = *req_PortFlag.Value
			}// CobraFlagsAssign
			
			if req_HealthyStatusCodeFlag.IsChanged() {
				req.HealthyStatusCode = req_HealthyStatusCodeFlag.Value
			}// CobraFlagsAssign
			
			if req_IntervalSecondsFlag.IsChanged() {
				req.IntervalSeconds = req_IntervalSecondsFlag.Value
			}// CobraFlagsAssign
			
			if req_HealthyThresholdCountFlag.IsChanged() {
				req.HealthyThresholdCount = req_HealthyThresholdCountFlag.Value
			}// CobraFlagsAssign
			
			if req_LoadBalancerIDFlag.IsChanged() {
				req.LoadBalancerID = *req_LoadBalancerIDFlag.Value
			}// CobraFlagsAssign
			
			if req_HealthCheckIDFlag.IsChanged() {
				req.HealthCheckID = *req_HealthCheckIDFlag.Value
			}// CobraFlagsAssign
			
			if req_PathFlag.IsChanged() {
				req.Path = req_PathFlag.Value
			}// CobraFlagsAssign
			
			if req_TimeoutSecondsFlag.IsChanged() {
				req.TimeoutSeconds = req_TimeoutSecondsFlag.Value
			}// CobraFlagsAssign
			

			err := networkHealthCheckService.Update(ctx, req)
			
			if err != nil {
				return err
			}
			
			return nil
		},
	}
	
	
	req_InitialDelaySecondsFlag = flags.NewIntP(cmd, "initial-delay-seconds", "i", 0, "")//CobraFlagsCreation
	
	req_UnhealthyThresholdCountFlag = flags.NewIntP(cmd, "unhealthy-threshold-count", "u", 0, "")//CobraFlagsCreation
	
	req_PortFlag = flags.NewIntP(cmd, "port", "p", 0, "")//CobraFlagsCreation
	
	req_HealthyStatusCodeFlag = flags.NewIntP(cmd, "healthy-status-code", "e", 0, "")//CobraFlagsCreation
	
	req_IntervalSecondsFlag = flags.NewIntP(cmd, "interval-seconds", "t", 0, "")//CobraFlagsCreation
	
	req_HealthyThresholdCountFlag = flags.NewIntP(cmd, "healthy-threshold-count", "a", 0, "")//CobraFlagsCreation
	
	req_LoadBalancerIDFlag = flags.NewStrP(cmd, "load-balancer-id", "l", "", "")//CobraFlagsCreation
	
	req_HealthCheckIDFlag = flags.NewStrP(cmd, "health-check-id", "c", "", "")//CobraFlagsCreation
	
	req_PathFlag = flags.NewStrP(cmd, "path", "b", "", "")//CobraFlagsCreation
	
	req_TimeoutSecondsFlag = flags.NewIntP(cmd, "timeout-seconds", "m", 0, "")//CobraFlagsCreation
	


	
	cmd.MarkFlagRequired("port")//CobraFlagsRequired
	
	cmd.MarkFlagRequired("load-balancer-id")//CobraFlagsRequired
	
	cmd.MarkFlagRequired("health-check-id")//CobraFlagsRequired
	
	parent.AddCommand(cmd)

}

