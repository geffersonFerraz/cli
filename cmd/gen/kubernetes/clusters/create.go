/*
*	DO NOT EDIT THIS FILE
*	IT IS AUTO GENERATED BY MGC
*	TEMPLATE: product.template
 */

package clusters

import (
	"context"

	
	"github.com/spf13/cobra"
	
	kubernetesSdk "github.com/MagaluCloud/mgc-sdk-go/kubernetes"
	
	flags "mgccli/cobra_utils/flags"
	
	"encoding/json"
	
	"fmt"
)

func Create(ctx context.Context, parent *cobra.Command, clusterService kubernetesSdk.ClusterService) {
	
	var req_NodePoolsFlag *flags.JSONArrayValue[kubernetesSdk.CreateNodePoolRequest] //CobraFlagsDefinition
	
	var req_AllowedCIDRsFlag *flags.StrSliceFlag //CobraFlagsDefinition
	
	var req_ServicesIpV4CIDRFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_ClusterIPv4CIDRFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_NameFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_VersionFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_DescriptionFlag *flags.StrFlag //CobraFlagsDefinition
	
	var req_EnabledServerGroupFlag *flags.BoolFlag //CobraFlagsDefinition
	
	

	cmd := &cobra.Command{
		Use:     "create",
		Short:   "todo",
		Long:    `todo2`,
		Run: func(cmd *cobra.Command, args []string) {
			
			
			var req kubernetesSdk.ClusterRequest// ServiceSDKParamCreate
			
			
			

			
			
			if req_NodePoolsFlag.IsChanged() {
				req.NodePools = req_NodePoolsFlag.Value
			}// CobraFlagsAssign
			
			if req_AllowedCIDRsFlag.IsChanged() {
				req.AllowedCIDRs = req_AllowedCIDRsFlag.Value
			}// CobraFlagsAssign
			
			if req_ServicesIpV4CIDRFlag.IsChanged() {
				req.ServicesIpV4CIDR = req_ServicesIpV4CIDRFlag.Value
			}// CobraFlagsAssign
			
			if req_ClusterIPv4CIDRFlag.IsChanged() {
				req.ClusterIPv4CIDR = req_ClusterIPv4CIDRFlag.Value
			}// CobraFlagsAssign
			
			if req_NameFlag.IsChanged() {
				req.Name = *req_NameFlag.Value
			}// CobraFlagsAssign
			
			if req_VersionFlag.IsChanged() {
				req.Version = req_VersionFlag.Value
			}// CobraFlagsAssign
			
			if req_DescriptionFlag.IsChanged() {
				req.Description = req_DescriptionFlag.Value
			}// CobraFlagsAssign
			
			if req_EnabledServerGroupFlag.IsChanged() {
				req.EnabledServerGroup = req_EnabledServerGroupFlag.Value
			}// CobraFlagsAssign
			

			createclusterresponse, err := clusterService.Create(ctx, req)
			sdkResult, err := json.MarshalIndent(createclusterresponse, "", "  ")
			if err != nil {
				fmt.Println(err.Error())
			}
			fmt.Println(string(sdkResult))
			if err != nil {
				fmt.Println(err.Error())
			}
		},
	}
	
	
	req_NodePoolsFlag = flags.NewJSONArrayValueP[kubernetesSdk.CreateNodePoolRequest](cmd, "node-pools", "n", "",)//CobraFlagsCreation
	
	req_AllowedCIDRsFlag = flags.NewStrSliceP(cmd, "allowed-c-i-d-rs", "a", []string{}, "")//CobraFlagsCreation
	
	req_ServicesIpV4CIDRFlag = flags.NewStrP(cmd, "services-ip-v4-c-i-d-r", "s", "", "")//CobraFlagsCreation
	
	req_ClusterIPv4CIDRFlag = flags.NewStrP(cmd, "cluster-i-pv4-c-i-d-r", "c", "", "")//CobraFlagsCreation
	
	req_NameFlag = flags.NewStrP(cmd, "name", "m", "", "")//CobraFlagsCreation
	
	req_VersionFlag = flags.NewStrP(cmd, "version", "v", "", "")//CobraFlagsCreation
	
	req_DescriptionFlag = flags.NewStrP(cmd, "description", "e", "", "")//CobraFlagsCreation
	
	req_EnabledServerGroupFlag = flags.NewBoolP(cmd, "enabled-server-group", "b", false, "")//CobraFlagsCreation
	


	
	cmd.MarkFlagRequired("name")//CobraFlagsRequired
	
	parent.AddCommand(cmd)

}

